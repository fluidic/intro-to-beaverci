Introduction to Beaver CI

Fluidic
dev@fluidic.io

* Outline

1. What is Beaver CI?
2. Why Beaver CI?
3. Background
4. Key Features
5. Core Concepts
6. How to Use
7. Plug-in
8. Further Work

* What is Beaver CI?

- An open source serverless continuous integration and deployment framework
- Runs on Amazon AWS, Microsoft Azure and Google Cloud Platform

.image beaverci/BeaverCI_Final_01.png 300 _

- [[https://github.com/fluidic/beaver]]

* Why Beaver CI?

- Pay as you go

.image beaverci/BeaverCI_Final_02.png 400 _

* Background

AWS Lambda, Azure Functions, Google Cloud Functions

- A lightweight compute solution for developers to create single-purpose, stand-alone functions that respond to Cloud events without the need to manage a server or runtime environmen
.image beaverci/aws-lambda-banner.png 200 _
- Beaver CI leverages these solutions

* Key Features

- On-demand build
- Composable tasks
- Easy to describe complex build pipeline
- Pluggalbe architecture

* Core Concepts

- Project
- Task
- Trigger

* Project

- A collection of Triggers and Tasks

* Task

`Task` is an abstraction for build task that can be composited into a bigger task.

- Function interface
  typedef Future<Object> ExecuteFunc(Context context);

- Class interface
  abstract class Task {
    Future<Object> execute(Context context);
  }

* Task Combinators

Task provides combinators to create a compositie task out of exisiting tasks.

- seq: executes asks sequentially
- par: executes tasks in parallel

  @TaskClass('my_task')
  class MyTask implements Task {
    MyTask.fromArgs(List<String> args);

    @override
    Future<Object> execute(Context context) => seq([
          new InstallDartSdkTask(withContentShell: true, withDartium: true),
          new PubTask(['get'], processWorkingDir: 'symbol'),
          new PubTask(['run', 'test'], processWorkingDir: 'symbol')
        ]).execute(context);
  }

* List of Tasks

- Archive (gunzip, untar, ...)
- File Operation (copy, delete, mkdir, ...)
- HTTP (get, post, download)
- Shell
- Cloud (cloud storage, nosql database)

* Trigger

Trigger is the event that triggers a new build

- GitHub: github_event_create, github_event_create_branch, github_event_create_tag, github_event_pull_request, github_event_push, ...
- Cron
- Other Trigger

* TriggerParser

  @TriggerParserClass('github')
  class GitHubTriggerParser implements TriggerParser {
    @override
    Iterable<String> getMainEvents() {
      return _eventMap.keys;
    }

    @override
    ParsedTrigger parse(Context context, Trigger trigger) {
      context.logger.fine('GitHubTriggerParser started.');
      final event = _getEvent(trigger.headers, trigger.data);
      final url = _getUrl(trigger.data);
      return new ParsedTrigger(event, url, trigger.data);
    }
    ...
  }

- Can be added more!

* How to Use

* Beaver CI Cloud Setup

- Create a new Beaver CI

  $ beaver_admin_cli setup -c credentials_path cloud_project_name

- Show the Beaver CI endpoint

  $ beaver_admin_cli describe cloud_project_name
  https://us-central1-beaver-ci.cloudfunctions.net/beaver

* Beaver CI Client Setup

  $ beaver_cli setup https://us-central1-beaver-ci.cloudfunctions.net/beaver

* Create Project

  $ beaver_cli create beaver_demo
  Created successfully!

* Upload Configuration

  $ beaver_cli upload beaver.yaml
  Uploaded successfully!
  Don't forget to add webhook https://us-central1-beaver-ci.cloudfunctions.net/beaver/github/beaver_demo \
  to the GitHub repo "https://github.com/fluidic/beaver_demo"

- beaver.yaml Configuration

  project_name: beaver_demo
  description: "Demo project for beaver-ci."

  triggers:
    - url: "https://github.com/fluidic/beaver_demo"
      type: github
      events: ["github_event_push"]
      task:
        name: my_build
        args: ["beaver_demo", "trigger:head_commit.id"]

- Add a webhook to GitHub repo

* More Configuration

  - name: build_by_push
    type: github
    url: "https://github.com/fluidic/beaver_demo"
    events: ["github_event_push"]
    task:
      - name: git
        args: ["clone", "trigger:url"]
      - name: git
        args: ["checkout", "trigger:.head_commit.id"]
      - name: pub
        args: ["get"]
      - name: pub
        args: ["run", "test"]
      - name: mail
        args: ["dev@fluidic.io"]

*

  - name: daily_build_by_cron
    type: cron
    task:
      - name: git
        args: ["clone", "trigger:url"]
      - name: pub
        args: ["get"]
      - name: pub
        args: ["run", "test"]
      - name: mail
        args: ["dev@fluidic.io"]

*

  - name: sdk_version_check
    type: cron
    task:
        - name: version_check
          args: ["dart"]
        - name: trigger
          args: ["daily_build_by_cron"]

* Test

  $ beaver_cli test -t github -e push -d {...} beaver_demo
  Success! Build Number = 0.

* Get Results

  $ beaver_cli get-results -b 0 beaver_demo
  beaver_demo
   - Build Number        : 0
   - TaskInstance Status : success
   - Task Status         : success
   - Trigger Event       : github_event_create_branch
   - Trigger URL         : https://github.com/fluidic/beaver
   - Log                 : 

* List Projects

  $ beaver_cli list
  beaver_demo
  foo
  bar

* Describe Project

  $ beaver_cli describe beaver_demo
  Configuration:
    - ...
    - ...

* Delete Project

  $ beaver_cli delete beaver_demo
  Deleted successfully!


* Plugin

* Further Work
